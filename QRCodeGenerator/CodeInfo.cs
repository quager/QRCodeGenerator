using System;
using System.Collections.Generic;

namespace QRCodeGenerator
{
    public static class CodeInfo
    {
        public const int MaxVersion = 40;

        public static readonly Func<int, int, bool>[] Masks =
        {
            (x, y) => (x + y) % 2 == 0,
            (x, y) => y % 2 == 0,
            (x, y) => x % 3 == 0,
            (x, y) => (x + y) % 3 == 0,
            (x, y) => (y / 2 + x / 3) % 2 == 0,
            (x, y) => (x * y) % 2 + (x * y) % 3 == 0,
            (x, y) => ((x * y) % 2 + (x * y) % 3) % 2 == 0,
            (x, y) => ((x + y) % 2 + (x * y) % 3) % 2 == 0
        };

        internal const int StartWidth = 21;

        internal const int DeltaWidth = 4;

        internal const string Limiter = "0000";

        internal static readonly byte[] Extenders = new byte[] { 236, 17 };

        internal const string AlphaNumericString = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";

        internal static readonly List<List<int>> AlignmentPatternsPositions = new List<List<int>>()
        {
            null,
            new List<int>() { 18 },
            new List<int>() { 22 },
            new List<int>() { 26 },
            new List<int>() { 30 },
            new List<int>() { 34 },
            new List<int>() { 6, 22, 38 },
            new List<int>() { 6, 24, 42 },
            new List<int>() { 6, 26, 46 },
            new List<int>() { 6, 28, 50 },
            new List<int>() { 6, 30, 54 },
            new List<int>() { 6, 32, 58 },
            new List<int>() { 6, 34, 62 },
            new List<int>() { 6, 26, 46, 66 },
            new List<int>() { 6, 26, 48, 70 },
            new List<int>() { 6, 26, 50, 74 },
            new List<int>() { 6, 30, 54, 78 },
            new List<int>() { 6, 30, 56, 82 },
            new List<int>() { 6, 30, 58, 86 },
            new List<int>() { 6, 34, 62, 90 },
            new List<int>() { 6, 28, 50, 72, 94 },
            new List<int>() { 6, 26, 50, 74, 98 },
            new List<int>() { 6, 30, 54, 78, 102 },
            new List<int>() { 6, 28, 54, 80, 106 },
            new List<int>() { 6, 32, 58, 84, 110 },
            new List<int>() { 6, 30, 58, 86, 114 },
            new List<int>() { 6, 34, 62, 90, 118 },
            new List<int>() { 6, 26, 50, 74, 98, 122 },
            new List<int>() { 6, 30, 54, 78, 102, 126 },
            new List<int>() { 6, 26, 52, 78, 104, 130 },
            new List<int>() { 6, 30, 56, 82, 108, 134 },
            new List<int>() { 6, 34, 60, 86, 112, 138 },
            new List<int>() { 6, 30, 58, 86, 114, 142 },
            new List<int>() { 6, 34, 62, 90, 118, 146 },
            new List<int>() { 6, 30, 54, 78, 102, 126, 150 },
            new List<int>() { 6, 24, 50, 76, 102, 128, 154 },
            new List<int>() { 6, 28, 54, 80, 106, 132, 158 },
            new List<int>() { 6, 32, 58, 84, 110, 136, 162 },
            new List<int>() { 6, 26, 54, 82, 110, 138, 166 },
            new List<int>() { 6, 30, 58, 86, 114, 142, 170 }
        };

        internal static readonly Dictionary<int, int[]> VersionCode = new Dictionary<int, int[]>
        {
            { 7,  new int[] { 0, 0, 0, 0, 1, 0,  0, 1, 1, 1, 1, 0,  1, 0, 0, 1, 1, 0 } },
            { 8,  new int[] { 0, 1, 0, 0, 0, 1,  0, 1, 1, 1, 0, 0,  1, 1, 1, 0, 0, 0 } },
            { 9,  new int[] { 1, 1, 0, 1, 1, 1,  0, 1, 1, 0, 0, 0,  0, 0, 0, 1, 0, 0 } },
            { 10, new int[] { 1, 0, 1, 0, 0, 1,  1, 1, 1, 1, 1, 0,  0, 0, 0, 0, 0, 0 } },
            { 11, new int[] { 0, 0, 1, 1, 1, 1,  1, 1, 1, 0, 1, 0,  1, 1, 1, 1, 0, 0 } },
            { 12, new int[] { 0, 0, 1, 1, 0, 1,  1, 0, 0, 1, 0, 0,  0, 1, 1, 0, 1, 0 } },
            { 13, new int[] { 1, 0, 1, 0, 1, 1,  1, 0, 0, 0, 0, 0,  1, 0, 0, 1, 1, 0 } },
            { 14, new int[] { 1, 1, 0, 1, 0, 1,  0, 0, 0, 1, 1, 0,  1, 0, 0, 0, 1, 0 } },
            { 15, new int[] { 0, 1, 0, 0, 1, 1,  0, 0, 0, 0, 1, 0,  0, 1, 1, 1, 1, 0 } },
            { 16, new int[] { 0, 1, 1, 1, 0, 0,  0, 1, 0, 0, 0, 1,  0, 1, 1, 1, 0, 0 } },
            { 17, new int[] { 1, 1, 1, 0, 1, 0,  0, 1, 0, 1, 0, 1,  1, 0, 0, 0, 0, 0 } },
            { 18, new int[] { 1, 0, 0, 1, 0, 0,  1, 1, 0, 0, 1, 1,  1, 0, 0, 1, 0, 0 } },
            { 19, new int[] { 0, 0, 0, 0, 1, 0,  1, 1, 0, 1, 1, 1,  0, 1, 1, 0, 0, 0 } },
            { 20, new int[] { 0, 0, 0, 0, 0, 0,  1, 0, 1, 0, 0, 1,  1, 1, 1, 1, 1, 0 } },
            { 21, new int[] { 1, 0, 0, 1, 1, 0,  1, 0, 1, 1, 0, 1,  0, 0, 0, 0, 1, 0 } },
            { 22, new int[] { 1, 1, 1, 0, 0, 0,  0, 0, 1, 0, 1, 1,  0, 0, 0, 1, 1, 0 } },
            { 23, new int[] { 0, 1, 1, 1, 1, 0,  0, 0, 1, 1, 1, 1,  1, 1, 1, 0, 1, 0 } },
            { 24, new int[] { 0, 0, 1, 1, 0, 1,  0, 0, 1, 1, 0, 1,  1, 0, 0, 1, 0, 0 } },
            { 25, new int[] { 1, 0, 1, 0, 1, 1,  0, 0, 1, 0, 0, 1,  0, 1, 1, 0, 0, 0 } },
            { 26, new int[] { 1, 1, 0, 1, 0, 1,  1, 0, 1, 1, 1, 1,  0, 1, 1, 1, 0, 0 } },
            { 27, new int[] { 0, 1, 0, 0, 1, 1,  1, 0, 1, 0, 1, 1,  1, 0, 0, 0, 0, 0 } },
            { 28, new int[] { 0, 1, 0, 0, 0, 1,  1, 1, 0, 1, 0, 1,  0, 0, 0, 1, 1, 0 } },
            { 29, new int[] { 1, 1, 0, 1, 1, 1,  1, 1, 0, 0, 0, 1,  1, 1, 1, 0, 1, 0 } },
            { 30, new int[] { 1, 0, 1, 0, 0, 1,  0, 1, 0, 1, 1, 1,  1, 1, 1, 1, 1, 0 } },
            { 31, new int[] { 0, 0, 1, 1, 1, 1,  0, 1, 0, 0, 1, 1,  0, 0, 0, 0, 1, 0 } },
            { 32, new int[] { 1, 0, 1, 0, 0, 0,  0, 1, 1, 0, 0, 0,  1, 0, 1, 1, 0, 1 } },
            { 33, new int[] { 0, 0, 1, 1, 1, 0,  0, 1, 1, 1, 0, 0,  0, 1, 0, 0, 0, 1 } },
            { 34, new int[] { 0, 1, 0, 0, 0, 0,  1, 1, 1, 0, 1, 0,  0, 1, 0, 1, 0, 1 } },
            { 35, new int[] { 1, 1, 0, 1, 1, 0,  1, 1, 1, 1, 1, 0,  1, 0, 1, 0, 0, 1 } },
            { 36, new int[] { 1, 1, 0, 1, 0, 0,  1, 0, 0, 0, 0, 0,  0, 0, 1, 1, 1, 1 } },
            { 37, new int[] { 0, 1, 0, 0, 1, 0,  1, 0, 0, 1, 0, 0,  1, 1, 0, 0, 1, 1 } },
            { 38, new int[] { 0, 0, 1, 1, 0, 0,  0, 0, 0, 0, 1, 0,  1, 1, 0, 1, 1, 1 } },
            { 39, new int[] { 1, 0, 1, 0, 1, 0,  0, 0, 0, 1, 1, 0,  0, 0, 1, 0, 1, 1 } },
            { 40, new int[] { 1, 1, 1, 0, 0, 1,  0, 0, 0, 1, 0, 0,  0, 1, 0, 1, 0, 1 } }
        };

        internal static readonly int[,][] CorrectionLevelAndMaskCode =
        {
            { // L 01 XOR 101010000010010
                new int[] { 1,1,1,0,1,1,1,1,1,0,0,0,1,0,0 },
                new int[] { 1,1,1,0,0,1,0,1,1,1,1,0,0,1,1 },
                new int[] { 1,1,1,1,1,0,1,1,0,1,0,1,0,1,0 },
                new int[] { 1,1,1,1,0,0,0,1,0,0,1,1,1,0,1 },
                new int[] { 1,1,0,0,1,1,0,0,0,1,0,1,1,1,1 },
                new int[] { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 },
                new int[] { 1,1,0,1,1,0,0,0,1,0,0,0,0,0,1 },
                new int[] { 1,1,0,1,0,0,1,0,1,1,1,0,1,1,0 }
            },
            { // M 00 XOR 101010000010010
                new int[] { 1,0,1,0,1,0,0,0,0,0,1,0,0,1,0 },
                new int[] { 1,0,1,0,0,0,1,0,0,1,0,0,1,0,1 },
                new int[] { 1,0,1,1,1,1,0,0,1,1,1,1,1,0,0 },
                new int[] { 1,0,1,1,0,1,1,0,1,0,0,1,0,1,1 },
                new int[] { 1,0,0,0,1,0,1,1,1,1,1,1,0,0,1 },
                new int[] { 1,0,0,0,0,0,0,1,1,0,0,1,1,1,0 },
                new int[] { 1,0,0,1,1,1,1,1,0,0,1,0,1,1,1 },
                new int[] { 1,0,0,1,0,1,0,1,0,1,0,0,0,0,0 }
            },
            { // Q 11 XOR 101010000010010
                new int[] { 0,1,1,0,1,0,1,0,1,0,1,1,1,1,1 },
                new int[] { 0,1,1,0,0,0,0,0,1,1,0,1,0,0,0 },
                new int[] { 0,1,1,1,1,1,1,0,0,1,1,0,0,0,1 },
                new int[] { 0,1,1,1,0,1,0,0,0,0,0,0,1,1,0 },
                new int[] { 0,1,0,0,1,0,0,1,0,1,1,0,1,0,0 },
                new int[] { 0,1,0,0,0,0,1,1,0,0,0,0,0,1,1 },
                new int[] { 0,1,0,1,1,1,0,1,1,0,1,1,0,1,0 },
                new int[] { 0,1,0,1,0,1,1,1,1,1,0,1,1,0,1 }
            },
            { // H 10 XOR 101010000010010
                new int[] { 0,0,1,0,1,1,0,1,0,0,0,1,0,0,1 },
                new int[] { 0,0,1,0,0,1,1,1,0,1,1,1,1,1,0 },
                new int[] { 0,0,1,1,1,0,0,1,1,1,0,0,1,1,1 },
                new int[] { 0,0,1,1,0,0,1,1,1,0,1,0,0,0,0 },
                new int[] { 0,0,0,0,1,1,1,0,1,1,0,0,0,1,0 },
                new int[] { 0,0,0,0,0,1,0,0,1,0,1,0,1,0,1 },
                new int[] { 0,0,0,1,1,0,1,0,0,0,0,1,1,0,0 },
                new int[] { 0,0,0,1,0,0,0,0,0,1,1,1,0,1,1 }
            }
        };

        internal static readonly int[,] NumberOfDataWords =
        {
            { // L
                19, 34, 55, 80, 108, 136, 156, 194, 232, 274, 324, 370, 428, 461, 523, 589, 647, 721, 795, 861, 932, 1006, 1094, 1174, 1276, 1370, 1468, 1531,
                1631, 1735, 1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956
            },
            { // M
                16, 28, 44, 64, 86, 108, 124, 154, 182, 216, 254, 290, 334, 365, 415, 453, 507, 563, 627, 669, 714, 782, 860, 914, 1000, 1062, 1128, 1193,
                1267, 1373, 1455, 1541, 1631, 1725, 1812, 1914, 1992, 2102, 2216, 2334
            },
            { // Q 
                13, 22, 34, 48, 62, 76, 88, 110, 132, 154, 180, 206, 244, 261, 295, 325, 367, 397, 445, 485, 512, 568, 614, 664, 718, 754, 808, 871, 911, 985,
                1033, 1115, 1171, 1231, 1286, 1354, 1426, 1502, 1582, 1666
            },
            { // H
                9, 16, 26, 36, 46, 60, 66, 86, 100, 122, 140, 158, 180, 197, 223, 253, 283, 313, 341, 385, 406, 442, 464, 514, 538, 596, 628, 661, 701, 745,
                793, 845, 901, 961, 986, 1054, 1096, 1142, 1222, 1276
            }
        };

        internal static readonly int[,] NumberOfCorrectionWords =
        {
            { // L
                7,  10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
                30, 30, 30, 30
            },
            { // M 
                10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
                28, 28, 28, 28
            },
            { // Q 
                13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
                30, 30, 30, 30
            },
            { // H
                17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
                30, 30, 30, 30
            }
        };

        internal static readonly int[,] NumberOfCorrectionBlocks =
        {
            { // L
                1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4,  4,  4,  4,  6,  6,  6,  6,  7,  8,  8,  9,  9,  10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22,
                24, 25
            },
            { // M
                1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5,  8,  9,  9,  10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45,
                47, 49
            },
            { // Q 
                1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8,  10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62,
                65, 68
            },
            { // H
                1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74,
                77, 81
            }
        };

        internal static readonly Dictionary<int, List<byte>> GeneratingPolynomial = new Dictionary<int, List<byte>>()
        {
            { 2,    new List<byte>() { 0, 25,  1 } },
            { 5,    new List<byte>() { 0, 113, 164, 166, 119, 10 } },
            { 6,    new List<byte>() { 0, 116, 0,   134, 5, 176, 15 } },
            { 7,    new List<byte>() { 0, 87,  229, 146, 149, 238, 102, 21 } },
            { 8,    new List<byte>() { 0, 175, 238, 208, 249, 215, 252, 196, 28 } },
            { 10,   new List<byte>() { 0, 251, 67,  46,  61,  118, 70,  64,  94,  32,  45 } },
            { 13,   new List<byte>() { 0, 74,  152, 176, 100, 86,  100, 106, 104, 130, 218, 206, 140, 78 } },
            { 14,   new List<byte>() { 0, 199, 249, 155, 48,  190, 124, 218, 137, 216, 87,  207, 59,  22,  91 } },
            { 15,   new List<byte>() { 0, 8,   183, 61,  91,  202, 37,  51,  58,  58,  237, 140, 124, 5,   99,  105 } },
            { 16,   new List<byte>() { 0, 120, 104, 107, 109, 102, 161, 76,  3,   91,  191, 147, 169, 182, 194, 225, 120 } },
            { 17,   new List<byte>() { 0, 43,  139, 206, 78,  43,  239, 123, 206, 214, 147, 24,  99,  150, 39,  243, 163, 136 } },
            { 18,   new List<byte>() { 0, 215, 234, 158, 94,  184, 97,  118, 170, 79,  187, 152, 148, 252, 179, 5,   98,  96,  153 } },
            { 20,   new List<byte>() { 0, 17,  60,  79,  50,  61,  163, 26,  187, 202, 180, 221, 225, 83,  239, 156, 164, 212, 212, 188, 190 } },
            { 22,   new List<byte>() { 0, 210, 171, 247, 242, 93,  230, 14,  109, 221, 53,  200, 74,  8,   172, 98,  80,  219, 134, 160, 105, 165, 231 } },
            { 24,   new List<byte>() { 0, 229, 121, 135, 48,  211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111, 0,   117, 232, 87,  96,  227, 21 } },
            { 26,   new List<byte>() { 0, 173, 125, 158, 2,   103, 182, 118, 17,  145, 201, 111, 28,  165, 53,  161, 21,  245, 142, 13,  102, 48,  227, 153, 145, 218, 70 } },
            { 28,   new List<byte>() { 0, 168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27,  232, 201, 21,  43,  245, 87,  42,  195, 212, 119, 242, 37,  9,   123 } },
            { 30,   new List<byte>() { 0, 41,  173, 145, 152, 216, 31,  179, 182, 50,  48,  110, 86,  239, 96,  222, 125, 42,  173, 226, 193, 224, 130, 156, 37,  251, 216, 238, 40,  192, 180 } },
            { 32,   new List<byte>() { 0, 10,  6,   106, 190, 249, 167, 4,   67,  209, 138, 138, 32,  242, 123, 89,  27,  120, 185, 80,  156, 38,  69,  171, 60,  28,  222, 80,  52,  254, 185, 220, 241 } },
            { 34,   new List<byte>() { 0, 111, 77,  146, 94,  26,  21,  108, 19,  105, 94,  113, 193, 86,  140, 163, 125, 58,  158, 229, 239, 218, 103, 56,  70,  114, 61,  183, 129, 167, 13,  98,  62,  129, 51 } },
            { 36,   new List<byte>() { 0, 200, 183, 98,  16,  172, 31,  246, 234, 60,  152, 115, 0,   167, 152, 113, 248, 238, 107, 18,  63,  218, 37,  87,  210, 105, 177, 120, 74,  121, 196, 117, 251, 113, 233, 30,  120 } },
            { 40,   new List<byte>() { 0, 59,  116, 79,  161, 252, 98,  128, 205, 128, 161, 247, 57,  163, 56,  235, 106, 53,  26,  187, 174, 226, 104, 170, 7,   175, 35,  181, 114, 88,  41,  47,  163, 125, 134, 72,  20,  232, 53,  35,  15 } },
            { 42,   new List<byte>() { 0, 250, 103, 221, 230, 25,  18,  137, 231, 33,  3,   58,  242, 221, 191, 110, 84,  230, 8,   188, 106, 96,  147, 15,  131, 139, 34,  101, 223, 39,  101, 213, 199, 237, 254, 201, 123, 171, 162, 194, 117, 50,  96 } },
            { 44,   new List<byte>() { 0, 190, 7,   61,  121, 71,  246, 69,  55,  168, 188, 89,  243, 191, 25,  72,  123, 9,   145, 14,  247, 1,   238, 44,  78,  143, 62,  224, 126, 118, 114, 68,  163, 52,  194, 217, 147, 204, 169, 37,  130, 113, 102, 73,  181 } },
            { 46,   new List<byte>() { 0, 112, 94,  88,  112, 253, 224, 202, 115, 187, 99,  89,  5,   54,  113, 129, 44,  58,  16,  135, 216, 169, 211, 36,  1,   4,   96,  60,  241, 73,  104, 234, 8,   249, 245, 119, 174, 52,  25,  157, 224, 43,  202, 223, 19,  82,  15 } },
            { 48,   new List<byte>() { 0, 228, 25,  196, 130, 211, 146, 60,  24,  251, 90,  39,  102, 240, 61,  178, 63,  46,  123, 115, 18,  221, 111, 135, 160, 182, 205, 107, 206, 95,  150, 120, 184, 91,  21,  247, 156, 140, 238, 191, 11,  94,  227, 84,  50,  163, 39,  34,  108 } },
            { 50,   new List<byte>() { 0, 232, 125, 157, 161, 164, 9,   118, 46,  209, 99,  203, 193, 35,  3,   209, 111, 195, 242, 203, 225, 46,  13,  32,  160, 126, 209, 130, 160, 242, 215, 242, 75,  77,  42,  189, 32,  113, 65,  124, 69,  228, 114, 235, 175, 124, 170, 215, 232, 133, 205 } },
            { 52,   new List<byte>() { 0, 116, 50,  86,  186, 50,  220, 251, 89,  192, 46,  86,  127, 124, 19,  184, 233, 151, 215, 22,  14,  59,  145, 37,  242, 203, 134, 254, 89,  190, 94,  59,  65,  124, 113, 100, 233, 235, 121, 22,  76,  86,  97,  39,  242, 200, 220, 101, 33,  239, 254, 116, 51 } },
            { 54,   new List<byte>() { 0, 183, 26,  201, 87,  210, 221, 113, 21,  46,  65,  45,  50,  238, 184, 249, 225, 102, 58,  209, 218, 109, 165, 26,  95,  184, 192, 52,  245, 35,  254, 238, 175, 172, 79,  123, 25,  122, 43,  120, 108, 215, 80,  128, 201, 235, 8,   153, 59,  101, 31,  198, 76,  31,  156 } },
            { 56,   new List<byte>() { 0, 106, 120, 107, 157, 164, 216, 112, 116, 2,   91,  248, 163, 36,  201, 202, 229, 6,   144, 254, 155, 135, 208, 170, 209, 12,  139, 127, 142, 182, 249, 177, 174, 190, 28,  10,  85,  239, 184, 101, 124, 152, 206, 96,  23,  163, 61,  27,  196, 247, 151, 154, 202, 207, 20,  61,  10 } },
            { 58,   new List<byte>() { 0, 82,  116, 26,  247, 66,  27,  62,  107, 252, 182, 200, 185, 235, 55,  251, 242, 210, 144, 154, 237, 176, 141, 192, 248, 152, 249, 206, 85,  253, 142, 65,  165, 125, 23,  24,  30,  122, 240, 214, 6,   129, 218, 29,  145, 127, 134, 206, 245, 117, 29,  41,  63,  159, 142, 233, 125, 148, 123 } },
            { 60,   new List<byte>() { 0, 107, 140, 26,  12,  9,   141, 243, 197, 226, 197, 219, 45,  211, 101, 219, 120, 28,  181, 127, 6,   100, 247, 2,   205, 198, 57,  115, 219, 101, 109, 160, 82,  37,  38,  238, 49,  160, 209, 121, 86,  11,  124, 30,  181, 84,  25,  194, 87,  65,  102, 190, 220, 70,  27,  209, 16,  89,  7,   33,  240 } },
            { 62,   new List<byte>() { 0, 65,  202, 113, 98,  71,  223, 248, 118, 214, 94,  51,  122, 37,  23,  2,   228, 58,  121, 7,   105, 135, 78,  243, 118, 70,  76,  223, 89,  72,  50,  70,  111, 194, 17,  212, 126, 181, 35,  221, 117, 235, 11,  229, 149, 147, 123, 213, 40,  115, 6,   200, 100, 26,  246, 182, 218, 127, 215, 36,  186, 110, 106 } },
            { 64,   new List<byte>() { 0, 45,  51,  175, 9,   7,   158, 159, 49,  68,  119, 92,  123, 177, 204, 187, 254, 200, 78,  141, 149, 119, 26,  127, 53,  160, 93,  199, 212, 29,  24,  145, 156, 208, 150, 218, 209, 4,   216, 91,  47,  184, 146, 47,  140, 195, 195, 125, 242, 238, 63,  99,  108, 140, 230, 242, 31,  204, 11,  178, 243, 217, 156, 213, 231 } },
            { 66,   new List<byte>() { 0, 5,   118, 222, 180, 136, 136, 162, 51,  46,  117, 13,  215, 81,  17,  139, 247, 197, 171, 95,  173, 65, 137,  178, 68,  111, 95,  101, 41,  72,  214, 169, 197, 95,  7,   44,  154, 77,  111, 236, 40,  121, 143, 63,  87,  80,  253, 240, 126, 217, 77,  34,  232, 106, 50,  168, 82,  76,  146, 67,  106, 171, 25,  132, 93,  45,  105 } },
            { 68,   new List<byte>() { 0, 247, 159, 223, 33,  224, 93,  77,  70,  90,  160, 32,  254, 43,  150, 84,  101, 190, 205, 133, 52,  60, 202,  165, 220, 203, 151, 93,  84,  15,  84,  253, 173, 160, 89,  227, 52,  199, 97,  95,  231, 52,  177, 41,  125, 137, 241, 166, 225, 118, 2,   54,  32,  82,  215, 175, 198, 43,  238, 235, 27,  101, 184, 127, 3,   5,   8,   163, 238 } }
        };

        internal static byte[] AlphaLookupTable { get; } = new byte[256];

        internal static int[] IndexLookupTable { get; } = new int[256];

        static CodeInfo()
        {
            AlphaLookupTable[0] = 1;

            for (int i = 1; i < 256; i++)
            {
                int b = AlphaLookupTable[i - 1] * 2;

                if (b > 255)
                    b ^= 285;

                AlphaLookupTable[i] = (byte)b;
                IndexLookupTable[b] = i;
            }

            IndexLookupTable[0] = -1;
            IndexLookupTable[1] = 0;
        }

        internal static int GetLengthIndicatorLength(int codeVersion, EncodingMode mode)
        {
            switch (mode)
            {
                case EncodingMode.Numeric:
                    if (codeVersion < 10) return 10;
                    if (codeVersion > 26) return 14;
                    return 12;
                case EncodingMode.AlphaNumeric:
                    if (codeVersion < 10) return 9;
                    if (codeVersion > 26) return 11;
                    return 13;
                case EncodingMode.Bytes:
                    if (codeVersion < 10) return 8;
                    if (codeVersion > 26) return 16;
                    return 16;
                case EncodingMode.Kanji:
                    if (codeVersion < 10) return 8;
                    if (codeVersion > 26) return 10;
                    return 12;
                default:
                    throw new Exception("Wrong Encoding Mode!");
            }
        }
    }
}
